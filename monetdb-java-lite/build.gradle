buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.junit.platform.gradle.plugin'

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}
version = '2.37'
ext.version = version
group = 'monetdb'
ext.group = group
archivesBaseName = 'monetdb-java-lite'
ext.archivesBaseName = archivesBaseName
ext.packaging = 'jar'

dependencies {
    //New MonetDB JDBC driver
    compile("${group}:monetdb-jdbc-new:+")
    runtime("${group}:monetdb-jdbc-new:+")

    //JUnit Jupiter API and TestEngine implementation
    testCompile('org.junit.jupiter:junit-jupiter-api:+')
    testCompile('org.junit.jupiter:junit-jupiter-engine:+')

    //Log using log4j
    testCompile('org.apache.logging.log4j:log4j-core:+')
    testCompile('org.apache.logging.log4j:log4j-jul:+')
}

junitPlatform { //configurations for JUnit5 tests
    platformVersion '1.0.0'
    logManager 'org.apache.logging.log4j.jul.LogManager'
    reportsDir file('build/test-results/junit-platform')
}

jar {
    manifest {
        attributes 'Description': 'Serveless version of the MonetDB database in the JVM - JDBC compliant'
    }
}

shadowJar { //Build instruction to the shadowJar (a jar which includes both the JDBC and MonetDBJavaLite jars)
    manifest {
        inheritFrom project.jar.manifest
    }
    destinationDir = file('./build/shadowJar')
}

task wrapper(type: Wrapper) { //Set the gradle wrapper, so users don't have to install Gradle
    gradleVersion = '4.7'
}

task javadocJar(type: Jar) { //Generate the javadocs jar
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) { //Generate the sources jar
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

